<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Additional workflows on Marblerun - The Service Mesh for Confidential Computing</title><link>https://marblerun.sh/docs/additional-workflows/</link><description>Recent content in Additional workflows on Marblerun - The Service Mesh for Confidential Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 14 Nov 2020 16:28:16 +0530</lastBuildDate><atom:link href="https://marblerun.sh/docs/additional-workflows/index.xml" rel="self" type="application/rss+xml"/><item><title>Monitoring and logging</title><link>https://marblerun.sh/docs/additional-workflows/monitoring/</link><pubDate>Sat, 14 Nov 2020 16:28:16 +0530</pubDate><guid>https://marblerun.sh/docs/additional-workflows/monitoring/</guid><description>Monitoring and logging As of now, the monitoring capabilities of Marblerun are basic. For status information, the Coordinator provides the /status endpoint in the client API. It returns the following information.
0 recovery mode: Found a sealed state of an old seal key. Waiting for user input on /recover. 1 uninitialized: Fresh start, initializing the Coordinator. 2 waiting for a manifest: Waiting for user input on /manifest 3 accepting marbles: Accepting Marbles through the Marble API More details about the Coordinator can be retrieved through its log as follows.</description></item><item><title>Updating a Manifest</title><link>https://marblerun.sh/docs/additional-workflows/update-manifest/</link><pubDate>Tue, 19 Jan 2021 15:33:00 +0100</pubDate><guid>https://marblerun.sh/docs/additional-workflows/update-manifest/</guid><description>Updating a Manifest In order to ensure the confidentiality of a deployed application, Marblerun uses a Manifest to which defines the software packages and the infrastructure your deployment uses. To verify that your deployment has not been altered with, the Manifest is usually set in stone after it was set to ensure no one can alter with your cluster.
Yet, updates play an important role to ensure your software stays secure.</description></item><item><title>Updating a deployment</title><link>https://marblerun.sh/docs/additional-workflows/updates/</link><pubDate>Sat, 14 Nov 2020 16:28:16 +0530</pubDate><guid>https://marblerun.sh/docs/additional-workflows/updates/</guid><description>Updating a deployment The following gives a walkthrough of typical deployment updates in a Kubernetes cluster and how to handle them with Marblerun.
Updating to a new Marblerun version When updating to a new Marblerun version, updates to both the control plane and data plane components may be required.
Updating the Coordinator Updating the Coordinator follows the regular steps for updating a deployment in Kubernetes.
kubectl -n marblerun set image deployment/marblerun-coordinator coordinator=ghcr.</description></item><item><title>Recovering the Coordinator</title><link>https://marblerun.sh/docs/additional-workflows/recover-coordinator/</link><pubDate>Thu, 19 Nov 2020 15:53:14 +0100</pubDate><guid>https://marblerun.sh/docs/additional-workflows/recover-coordinator/</guid><description>Recovering the Coordinator As described in the recovery chapter, different situations can require the recovery of the Coordinator. If the Coordinator finds a sealed state during its startup which it is unable to unseal using the host-specific SGX sealing key, it will wait for further instructions. You have two options:
Recover the sealed state by uploading the recovery secret, which was encrypted for the RecoveryKeys defined in the Manifest</description></item></channel></rss>