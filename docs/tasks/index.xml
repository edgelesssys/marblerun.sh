<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tasks on Marblerun - The Service Mesh for Confidential Computing</title><link>https://marblerun.sh/docs/tasks/</link><description>Recent content in Tasks on Marblerun - The Service Mesh for Confidential Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 14 Nov 2020 16:28:16 +0530</lastBuildDate><atom:link href="https://marblerun.sh/docs/tasks/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploying Marblerun</title><link>https://marblerun.sh/docs/tasks/deploy/</link><pubDate>Sat, 14 Nov 2020 16:28:16 +0530</pubDate><guid>https://marblerun.sh/docs/tasks/deploy/</guid><description>Deploying Marblerun This article assumes that you have an existing Kubernetes cluster. Currently, there are several providers offering confidential nodes on CPUs with SGX support:
Azure Kubernetes Services confidential nodes on DCv2 VMs An AKS cluster can be created using the Azure CLI or the Azure portal Alibaba Cloud ECS Bare Metal Instances IBM Cloud Bare Metal Servers Equinix Bare Metal Servers Alternatively, you can deploy the steps with minikube Note that you need DCAP infrastructure in place for remote attestation to work.</description></item><item><title>Defining a Manifest</title><link>https://marblerun.sh/docs/tasks/define-manifest/</link><pubDate>Thu, 19 Nov 2020 16:44:36 +0100</pubDate><guid>https://marblerun.sh/docs/tasks/define-manifest/</guid><description>Defining a Manifest The Manifest is a simple JSON file that determines the key properties of your cluster: Packages, Marbles, Secrets, and RecoveryKeys. This article describes how to define these in your manifest.json.
Manifest:Packages The Packages section of the Manifest lists all the secure enclave software-packages that your application uses. A package is defined by the following properties.
UniqueID: this value will pin this package to one specific release build of an application.</description></item><item><title>Updating a Manifest</title><link>https://marblerun.sh/docs/tasks/update-manifest/</link><pubDate>Tue, 19 Jan 2021 15:33:00 +0100</pubDate><guid>https://marblerun.sh/docs/tasks/update-manifest/</guid><description>Updating a Manifest In order to ensure the confidentiality of a deployed application, Marblerun uses a Manifest to which defines the software packages and the infrastructure your deployment uses. To verify that your deployment has not been altered with, the Manifest is usually set in stone after it was set to ensure no one can alter with your cluster.
Yet, updates play an important role to ensure your software stays secure.</description></item><item><title>Adding a service</title><link>https://marblerun.sh/docs/tasks/add-service/</link><pubDate>Sat, 14 Nov 2020 16:28:16 +0530</pubDate><guid>https://marblerun.sh/docs/tasks/add-service/</guid><description>Adding a service Adding a service to your application requires three steps, which are described in the following.
Step 1: Get your service ready for Marblerun To get your service ready for Marblerun, you need to rebuild it with one of the supported runtimes:
EGo Edgeless RT Graphene Make your service use the provided TLS credentials Quick refresher: Marblerun&amp;rsquo;s Coordinator issues TLS credentials for each verified Marble (i.e., a service running in a secure enclave) as is described here.</description></item><item><title>Building a service: EGo</title><link>https://marblerun.sh/docs/tasks/build-service-ego/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marblerun.sh/docs/tasks/build-service-ego/</guid><description>Building a service: EGo To get your Go service ready for Marblerun, you possibly need to adapt its code slightly and you need to rebuild it. Details are given in the following. Note that we are working on making these unnecessary in the future.
Make your service use the provided TLS credentials If your service already uses TLS and gets the credentials from, e.g., a file, you just need to adapt the Manifest.</description></item><item><title>Building a service: Graphene</title><link>https://marblerun.sh/docs/tasks/build-service-graphene/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marblerun.sh/docs/tasks/build-service-graphene/</guid><description>Building a service: Graphene Running a Graphene app with Marblerun requires some changes to its manifest. These are explained in the following. See also the helloworld example.
Entrypoint and argv We provide the premain-graphene executable with the Marblerun Releases. It will contact the Coordinator, set up the environment, and run the actual application. Therefore, you have to set it as the entry point of the Graphene project and place the actual entry point in argv0:</description></item><item><title>Setting a Manifest</title><link>https://marblerun.sh/docs/tasks/set-manifest/</link><pubDate>Sat, 14 Nov 2020 16:28:16 +0530</pubDate><guid>https://marblerun.sh/docs/tasks/set-manifest/</guid><description>Setting a Manifest The Manifest is a JSON document that defines which services span the mesh and how they should be configured. It further defines what Infrastructure providers are allowed. You can set a Manifest through Marblerun&amp;rsquo;s Client REST-API. The endpoint for all Manifest operations is /manifest.
See the following Manifest for example (manifest.json).
{ &amp;#34;Packages&amp;#34;: { &amp;#34;backend&amp;#34;: { &amp;#34;UniqueID&amp;#34;: &amp;#34;6b2822ac2585040d4b9397675d54977a71ef292ab5b3c0a6acceca26074ae585&amp;#34;, &amp;#34;ProductID&amp;#34;: 43, &amp;#34;SecurityVersion&amp;#34;: 1, &amp;#34;Debug&amp;#34;: false }, &amp;#34;frontend&amp;#34;: { &amp;#34;SignerID&amp;#34;: &amp;#34;43361affedeb75affee9baec7e054a5e14883213e5a121b67d74a0e12e9d2b7a&amp;#34;, &amp;#34;ProductID&amp;#34;: 42, &amp;#34;SecurityVersion&amp;#34;: 3, &amp;#34;Debug&amp;#34;: true } }, &amp;#34;Marbles&amp;#34;: { &amp;#34;backend_first&amp;#34;: { &amp;#34;Package&amp;#34;: &amp;#34;backend&amp;#34;, &amp;#34;MaxActivations&amp;#34;: 1, &amp;#34;Parameters&amp;#34;: { &amp;#34;Files&amp;#34;: { &amp;#34;/tmp/defg.</description></item><item><title>Monitoring and logging</title><link>https://marblerun.sh/docs/tasks/monitoring/</link><pubDate>Sat, 14 Nov 2020 16:28:16 +0530</pubDate><guid>https://marblerun.sh/docs/tasks/monitoring/</guid><description>Monitoring and logging As of now, the monitoring capabilities of Marblerun are basic. For status information, the Coordinator provides the /status endpoint in the client API. It returns the following information.
0 recovery mode: Found a sealed state of an old seal key. Waiting for user input on /recover. 1 uninitialized: Fresh start, initializing the Coordinator. 2 waiting for a manifest: Waiting for user input on /manifest 3 accepting marbles: Accepting Marbles through the Marble API More details about the Coordinator can be retrieved through its log as follows.</description></item><item><title>Verifying a deployment</title><link>https://marblerun.sh/docs/tasks/verification/</link><pubDate>Sat, 14 Nov 2020 16:28:16 +0530</pubDate><guid>https://marblerun.sh/docs/tasks/verification/</guid><description>Verifying a deployment An important feature of Marblerun is providing the ability to verifying the confidentiality and integrity of the whole application on the client-side. To that end, we provide a simple REST-API that clients can use before interacting with the application.
Establishing trust The first step is to establish trust with the whole microservice mesh. Therefore, Marblerun exposes the /quote endpoint that returns a quote and a certificate chain consisting of a root CA and an intermediate CA for the whole mesh.</description></item><item><title>Updating a deployment</title><link>https://marblerun.sh/docs/tasks/updates/</link><pubDate>Sat, 14 Nov 2020 16:28:16 +0530</pubDate><guid>https://marblerun.sh/docs/tasks/updates/</guid><description>Updating a deployment The following gives a walkthrough of typical deployment updates in a Kubernetes cluster and how to handle them with Marblerun.
Updating to a new Marblerun version When updating to a new Marblerun version, updates to both the control plane and data plane components may be required.
Updating the Coordinator Updating the Coordinator follows the regular steps for updating a deployment in Kubernetes.
kubectl -n marblerun set image deployment/marblerun-coordinator coordinator=ghcr.</description></item><item><title>Recovering the Coordinator</title><link>https://marblerun.sh/docs/tasks/recover-coordinator/</link><pubDate>Thu, 19 Nov 2020 15:53:14 +0100</pubDate><guid>https://marblerun.sh/docs/tasks/recover-coordinator/</guid><description>Recovering the Coordinator As described here, different situations can require the recovery of the Coordinator. If the Coordinator finds a sealed state during its startup which it is unable to unseal using the host-specific SGX sealing key, it will wait for further instructions. You have two options:
Recover the sealed state by uploading the recovery secret, which was encrypted for the RecoveryKeys defined in the Manifest
The recovery secret can be uploaded through the /recover client API endpoint.</description></item></channel></rss>