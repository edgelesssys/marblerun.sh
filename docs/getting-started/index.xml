<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on Marblerun - The Service Mesh for Confidential Computing</title><link>https://marblerun.sh/docs/getting-started/</link><description>Recent content in Getting Started on Marblerun - The Service Mesh for Confidential Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 14 Nov 2020 16:28:16 +0530</lastBuildDate><atom:link href="https://marblerun.sh/docs/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>Quickstart</title><link>https://marblerun.sh/docs/getting-started/quickstart/</link><pubDate>Sat, 14 Nov 2020 16:28:16 +0530</pubDate><guid>https://marblerun.sh/docs/getting-started/quickstart/</guid><description>Quickstart Step 0: Setup Set up a Kubernetes cluster and install kubectl. One easy way to get started is to run Kubernetes on your local machine using Minikube.
Please also install Helm (&amp;ldquo;the package manager for Kubernetes&amp;rdquo;).
Step 1: Install the Coordinator onto the cluster Add the Edgeless Systems chart repository to Helm.
helm repo add edgeless https://helm.edgeless.systems helm repo update Install Marblerun&amp;rsquo;s Coordinator using Helm. Update the hostname with your cluster&amp;rsquo;s FQDN or use localhost for local testing.</description></item><item><title>Confidential Computing</title><link>https://marblerun.sh/docs/getting-started/confidential-computing/</link><pubDate>Sat, 14 Nov 2020 16:28:16 +0530</pubDate><guid>https://marblerun.sh/docs/getting-started/confidential-computing/</guid><description>Confidential computing Confidential computing protects data in use by performing computation in hardware-based secure enclaves. The most prominent enclave to date is probably Intel SGX. Enclaves prevent unauthorized access or modification of applications and data while in use, thereby increasing the security assurances for organizations that manage sensitive and regulated data. For information about confidential computing, see the Confidential Computing Consortium white paper.</description></item><item><title>Service Mesh</title><link>https://marblerun.sh/docs/getting-started/service-mesh/</link><pubDate>Sat, 14 Nov 2020 16:28:16 +0530</pubDate><guid>https://marblerun.sh/docs/getting-started/service-mesh/</guid><description>Confidential service mesh A service mesh is an infrastructure layer for managing, observing, and securing communications in a container-based cluster. In the Kubernetes world, Istio, HashiCorp Consul, and Linkerd are the most popular general-purpose service meshes.
When we started looking into the concept of confidential microservices, we realized that there are additional challenges and requirements for service meshes in the context of confidential computing.
How to make an entire cluster or distributed app verifiable in a meaningful way from the outside?</description></item><item><title>Overview</title><link>https://marblerun.sh/docs/getting-started/overview/</link><pubDate>Sat, 14 Nov 2020 16:28:16 +0530</pubDate><guid>https://marblerun.sh/docs/getting-started/overview/</guid><description>Overview Logically, Marblerun consists of two parts, the control plane called Coordinator and the data plane called Marbles. The Coordinator needs to be deployed once in your cluster and the Marble layer needs to be integrated with each service. Marblerun is configured with a simple JSON document called the Manifest. It specifies the topology of the distributed app, the infrastructure properties, and provides configuration parameters for each service.
Manifest The Manifest is a simple JSON file specifying three asset groups: Packages, Infrastructures, and Marbles:</description></item></channel></rss>