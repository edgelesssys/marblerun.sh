<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on Marblerun - The Service Mesh for Confidential Computing</title><link>https://marblerun.sh/docs/getting-started/</link><description>Recent content in Getting Started on Marblerun - The Service Mesh for Confidential Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 14 Nov 2020 16:28:16 +0530</lastBuildDate><atom:link href="https://marblerun.sh/docs/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>Quickstart</title><link>https://marblerun.sh/docs/getting-started/quickstart/</link><pubDate>Sat, 14 Nov 2020 16:28:16 +0530</pubDate><guid>https://marblerun.sh/docs/getting-started/quickstart/</guid><description>Quickstart Step 0: Setup Set up a Kubernetes cluster and install kubectl. Probably the easiest way to get started is to run Kubernetes on your local machine using Minikube. Another easy way is to use Azure Kubernetes Service (AKS), which offers SGX-enabled nodes.
Please also install Helm (&amp;ldquo;the package manager for Kubernetes&amp;rdquo;).
Step 1: Install the Coordinator onto the cluster Add the Edgeless Systems chart repository to Helm.
helm repo add edgeless https://helm.</description></item><item><title>Concepts</title><link>https://marblerun.sh/docs/getting-started/concepts/</link><pubDate>Sat, 14 Nov 2020 16:28:16 +0530</pubDate><guid>https://marblerun.sh/docs/getting-started/concepts/</guid><description>Concepts This article describes the concepts of confidential computing and service meshes which are key to the Marblerun approach.
Confidential computing Confidential computing protects data in use by performing computation in hardware-based secure enclaves. The most prominent enclave to date is probably Intel SGX. Enclaves prevent unauthorized access or modification of applications and data while in use, thereby increasing the security assurances for organizations that manage sensitive and regulated data. For information about confidential computing, see the Confidential Computing Consortium white paper.</description></item><item><title>Coordinator</title><link>https://marblerun.sh/docs/getting-started/coordinator/</link><pubDate>Thu, 19 Nov 2020 16:30:52 +0100</pubDate><guid>https://marblerun.sh/docs/getting-started/coordinator/</guid><description>Coordinator The Coordinator represents the control plane in Marblerun. It communicates with the data plane through gRPC and provides an HTTP-REST interface on the client-side. The Coordinator can be configured with several environment variables:
EDG_COORDINATOR_MESH_ADDR: The listener address for the gRPC server EDG_COORDINATOR_CLIENT_ADDR: The listener address for the HTTP server EDG_COORDINATOR_DNS_NAMES: The DNS names for the cluster&amp;rsquo;s root certificate EDG_COORDINATOR_SEAL_DIR: The file path for storing sealed data Client API The Client API is designed as an HTTP-REST interface.</description></item><item><title>Marbles</title><link>https://marblerun.sh/docs/getting-started/marbles/</link><pubDate>Thu, 19 Nov 2020 16:33:26 +0100</pubDate><guid>https://marblerun.sh/docs/getting-started/marbles/</guid><description>Marbles Marbles represent the data plane in Marblerun and run your actual application code in secure enclaves within otherwise normal Docker containers. Marbles communicate with the Coordinator via gRPC over TLS. See the Add a Service section on how to build and configure a Marble.</description></item></channel></rss>