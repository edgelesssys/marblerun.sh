<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Features on Marblerun - The Control Plane for Confidential Computing</title><link>https://marblerun.sh/docs/features/</link><description>Recent content in Features on Marblerun - The Control Plane for Confidential Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 14 Nov 2020 16:28:16 +0530</lastBuildDate><atom:link href="https://marblerun.sh/docs/features/index.xml" rel="self" type="application/rss+xml"/><item><title>Attestation</title><link>https://marblerun.sh/docs/features/attestation/</link><pubDate>Sat, 14 Nov 2020 16:28:16 +0530</pubDate><guid>https://marblerun.sh/docs/features/attestation/</guid><description>Attestation Hardware-rooted remote attestation is a key ingredient for distributed confidential apps. Marblerun relies heavily on the Data Center Attestation Primitives (DCAP) of the latest SGX-enabled Intel Xeon processors. At the time of writing only Microsoft Azure had a public DCAP service deployed in their data-centers. Hence, our demos are heavily tested and deployed on Azure Kubernetes Service (AKS). However, Marblerun works with any DCAP service complying with the SGX specification.</description></item><item><title>Recovery</title><link>https://marblerun.sh/docs/features/recovery/</link><pubDate>Sat, 14 Nov 2020 16:28:16 +0530</pubDate><guid>https://marblerun.sh/docs/features/recovery/</guid><description>Recovery Persistent storage for confidential applications in the cloud requires a bit of attention. By design, SGX sealing keys are unique to a single CPU, which means using the default SGX sealing methods has some caveats. For example, sealing data while running on one host could mean the data can&amp;rsquo;t be unsealed when running on another host later on.
As described in our secrets management chapter, the Coordinator provides Marbles with virtual sealing keys making persistence straightforward for your applications.</description></item><item><title>Secrets management</title><link>https://marblerun.sh/docs/features/secrets-management/</link><pubDate>Sat, 14 Nov 2020 16:28:16 +0530</pubDate><guid>https://marblerun.sh/docs/features/secrets-management/</guid><description>Secrets management The generation and the management of cryptographic keys and certificates for Marbles (i.e., containers running enclaves) are central duties of the Coordinator. Keys and certificates are passed to Marbles on startup via placeholders defined in the Manifest. You can learn more about this mechanism in our setting a manifest hands-on. Specifically, the Coordinator provides the following to Marbles.
Virtual sealing keys Shared symmetric keys TLS credentials Virtual sealing keys A key feature of Intel SGX is that it allows enclave software to derive so called &amp;ldquo;sealing keys&amp;rdquo;.</description></item><item><title>Kubernetes integration</title><link>https://marblerun.sh/docs/features/auto-injection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marblerun.sh/docs/features/auto-injection/</guid><description>Kubernetes integration Marblerun provides its data-plane configuration through Kubernetes resource definitions. For this, like regular service meshes, Marblerun uses Kubernetes' admission controllers.
Marblerun optionally injects tolerations and resources for its SGX device plugin. See the Kubernetes deployment section for more information.
You can enable auto-injection of the data-plane configuration for a namespace using the Marblerun CLI:
marblerun namespace add NAMESPACE [--no-sgx-injection] This will add the label marblerun/inject=enabled to the chosen namespace and allow the admission webhook to intercept the creation of deployments, pods, etc.</description></item><item><title>Supported runtimes</title><link>https://marblerun.sh/docs/features/runtimes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marblerun.sh/docs/features/runtimes/</guid><description>Supported runtimes Marblerun strives to be runtime-agnostic. Currently supported runtimes are described below. More will follow in future.
EGo EGo is the preferred way for writing confidential Go applications from scratch as well as porting existing ones. Usage is very similar to conventional Go programming. Continue with our building a service with EGo hands-on to use it with Marblerun.
Edgeless RT With Edgeless RT you can create confidential C++ applications with a low TCB.</description></item><item><title>Planned features</title><link>https://marblerun.sh/docs/features/planned-features/</link><pubDate>Sat, 14 Nov 2020 16:28:16 +0530</pubDate><guid>https://marblerun.sh/docs/features/planned-features/</guid><description>Planned features Among others, the following features are planned for Marblerun.
Splitting recovery key between a set of parties Fault-tolerant distribution of the Coordinator Transparent TLS for Marbles Constant-time crypto in the Coordinator Use online time sources for the verification of certificates and SGX collaterals</description></item></channel></rss>