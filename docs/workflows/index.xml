<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Core workflows on Marblerun - The Control Plane for Confidential Computing</title><link>https://marblerun.sh/docs/workflows/</link><description>Recent content in Core workflows on Marblerun - The Control Plane for Confidential Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 14 Nov 2020 16:28:16 +0530</lastBuildDate><atom:link href="https://marblerun.sh/docs/workflows/index.xml" rel="self" type="application/rss+xml"/><item><title>Defining a Manifest</title><link>https://marblerun.sh/docs/workflows/define-manifest/</link><pubDate>Thu, 19 Nov 2020 16:44:36 +0100</pubDate><guid>https://marblerun.sh/docs/workflows/define-manifest/</guid><description>Defining a Manifest The Manifest is a simple JSON file that determines the key properties of your cluster: Packages, Marbles, Secrets, and RecoveryKeys. This article describes how to define these in your manifest.json.
Manifest:Packages The Packages section of the Manifest lists all the secure enclave software-packages that your application uses. A package is defined by the following properties.
UniqueID: this value will pin this package to one specific release build of an application.</description></item><item><title>Setting a Manifest</title><link>https://marblerun.sh/docs/workflows/set-manifest/</link><pubDate>Sat, 14 Nov 2020 16:28:16 +0530</pubDate><guid>https://marblerun.sh/docs/workflows/set-manifest/</guid><description>Setting a Manifest The Manifest is a JSON document that defines which services span the mesh and how they should be configured. It further defines what Infrastructure providers are allowed. You can set a Manifest through Marblerun&amp;rsquo;s Client REST-API. The endpoint for all Manifest operations is /manifest.
See the following Manifest for example (manifest.json).
{ &amp;#34;Packages&amp;#34;: { &amp;#34;backend&amp;#34;: { &amp;#34;UniqueID&amp;#34;: &amp;#34;6b2822ac2585040d4b9397675d54977a71ef292ab5b3c0a6acceca26074ae585&amp;#34;, &amp;#34;ProductID&amp;#34;: 43, &amp;#34;SecurityVersion&amp;#34;: 1, &amp;#34;Debug&amp;#34;: false }, &amp;#34;frontend&amp;#34;: { &amp;#34;SignerID&amp;#34;: &amp;#34;43361affedeb75affee9baec7e054a5e14883213e5a121b67d74a0e12e9d2b7a&amp;#34;, &amp;#34;ProductID&amp;#34;: 42, &amp;#34;SecurityVersion&amp;#34;: 3, &amp;#34;Debug&amp;#34;: true } }, &amp;#34;Marbles&amp;#34;: { &amp;#34;backend_first&amp;#34;: { &amp;#34;Package&amp;#34;: &amp;#34;backend&amp;#34;, &amp;#34;MaxActivations&amp;#34;: 1, &amp;#34;Parameters&amp;#34;: { &amp;#34;Files&amp;#34;: { &amp;#34;/tmp/defg.</description></item><item><title>Adding a service</title><link>https://marblerun.sh/docs/workflows/add-service/</link><pubDate>Sat, 14 Nov 2020 16:28:16 +0530</pubDate><guid>https://marblerun.sh/docs/workflows/add-service/</guid><description>Adding a service Adding a service to your application requires three steps, which are described in the following.
Step 1: Get your service ready for Marblerun To get your service ready for Marblerun, you need to rebuild it with one of the supported runtimes:
EGo Edgeless RT Graphene Make your service use the provided TLS credentials Quick refresher: Marblerun&amp;rsquo;s Coordinator issues TLS credentials for each verified Marble (i.e., a service running in a secure enclave) as is described in our secrets management chapter.</description></item><item><title>Verifying a deployment</title><link>https://marblerun.sh/docs/workflows/verification/</link><pubDate>Sat, 14 Nov 2020 16:28:16 +0530</pubDate><guid>https://marblerun.sh/docs/workflows/verification/</guid><description>Verifying a deployment Marblerun provids a simple REST-API for clients to verify the confidentiality and integrity of the coordinator and the deployed Marbles.
Establishing trust in the Coordinator Marblerun exposes the /quote endpoint that returns a quote and a certificate chain consisting of a root and intermediate CA. The root CA is fixed for the lifetime of your deployment, while the intermediate CA changes in case you update the packages specified in your Manifest.</description></item></channel></rss>